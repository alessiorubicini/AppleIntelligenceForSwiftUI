//
//  AIImagePlaceholder.swift
//  AppleIntelligenceForSwiftUI
//
//  Created by Alessio Rubicini on 17/06/25.
//

import SwiftUI

public enum AIImageGenerationState {
    case idle(prompt: String)
    case generating
    case generated(image: Image)
}

/// An animated placeholder view for image content being generated by AI.
public struct AIImageGeneration: View {
    public let state: AIImageGenerationState
    
    public init(state: AIImageGenerationState) {
        self.state = state
    }
    
    public var body: some View {
        ZStack {
            switch state {
            case .idle(let prompt):
                IdlePlaceholder(prompt: prompt)
                    .transition(.opacity.combined(with: .blurReplace))
            case .generating:
                GeneratingPlaceholder()
                    .transition(.opacity.combined(with: .blurReplace))
            case .generated(let image):
                GeneratedPlaceholder(image: image)
                    .transition(.opacity.combined(with: .blurReplace))
            }
        }
        .animation(.easeInOut(duration: 0.45), value: state.idForTransition)
    }
}

// Helper for transition identity
private extension AIImageGenerationState {
    var idForTransition: String {
        switch self {
        case .idle: return "idle"
        case .generating: return "generating"
        case .generated: return "generated"
        }
    }
}

// MARK: - Idle Placeholder

private struct IdlePlaceholder: View {
    let prompt: String
    @State private var animate = false
    var body: some View {
        ZStack {
            AnimatedBubble(animate: $animate)
                .frame(width: 160, height: 160)
            
            Text(prompt)
                //.aitext()
                .font(.subheadline)
                .foregroundColor(Color.primary.opacity(0.6))
                .multilineTextAlignment(.center)
                .minimumScaleFactor(0.5)
                .lineLimit(3)
                .padding(.horizontal, 8)
                .padding(.bottom, 2)
                
            
        }
        .frame(width: 160, height: 160)
        .onAppear {
            withAnimation(Animation.easeInOut(duration: 2.2).repeatForever(autoreverses: true)) {
                animate = true
            }
        }
    }
}

private struct AnimatedBubble: View {
    @Binding var animate: Bool
    @State private var hueShift: Double = 0
    var body: some View {
        TimelineView(.animation) { timeline in
            let time = timeline.date.timeIntervalSinceReferenceDate
            let hue = (time.truncatingRemainder(dividingBy: 12.0)) / 12.0 // 12 seconds for a full cycle
            GeometryReader { geo in
                ZStack {
                    // Outer glow
                    Circle()
                        .fill(
                            RadialGradient(gradient: Gradient(colors: [
                                Color.orange.opacity(0.18),
                                Color.purple.opacity(0.10),
                                Color.clear
                            ]), center: .center, startRadius: 60, endRadius: 120)
                        )
                        .blur(radius: 16)
                        //.scaleEffect(1.15)
                    
                    Circle()
                        .fill(
                            LinearGradient(gradient: Gradient(colors: [
                                Color(hue: (0.60 + hue).truncatingRemainder(dividingBy: 1), saturation: 0.35, brightness: 0.95), // blue
                                Color(hue: (0.85 + hue).truncatingRemainder(dividingBy: 1), saturation: 0.35, brightness: 0.95), // pink
                                Color(hue: (0.12 + hue).truncatingRemainder(dividingBy: 1), saturation: 0.35, brightness: 0.95)  // yellow/orange
                            ]), startPoint: .top, endPoint: .bottom)
                        )
                        .opacity(0.85)
                        .blur(radius: 6)
                        .overlay(
                            // Edge highlight (top right)
                            Circle()
                                .stroke(
                                    AngularGradient(gradient: Gradient(colors: [
                                        Color.white.opacity(0.7),
                                        Color.clear,
                                        Color.white.opacity(0.2),
                                        Color.clear,
                                        Color.white.opacity(0.7)
                                    ]), center: .center, angle: .degrees(animate ? 360 : 0)),
                                    lineWidth: 6
                                )
                                .blur(radius: 8)
                                .opacity(0.7)
                        )
                        .shadow(color: Color.purple.opacity(0.18), radius: 18)
                        .scaleEffect(animate ? 1.04 : 0.98)
                        .animation(Animation.easeInOut(duration: 2.2).repeatForever(autoreverses: true), value: animate)
                    
                    Circle()
                        .fill(
                            RadialGradient(gradient: Gradient(colors: [
                                Color.orange.opacity(0.18),
                                Color.clear
                            ]), center: .center, startRadius: 10, endRadius: 60)
                        )
                        .blur(radius: 12)
                        .offset(y: geo.size.height * 0.18)
                }
            }
        }
    }
}


// MARK: - Generating Placeholder

private struct GeneratingPlaceholder: View {
    
    var body: some View {
        ZStack {
            // Main bubble: soft white fill
            Circle()
                .fill(Color.white.opacity(0.13))
                .frame(width: 150, height: 150)
                .overlay(
                    // Subtle colored border glow
                    Circle()
                        .stroke(
                            AngularGradient(gradient: Gradient(colors: [
                                Color.blue.opacity(0.32),
                                Color.purple.opacity(0.28),
                                Color.orange.opacity(0.22),
                                Color.blue.opacity(0.32)
                            ]), center: .center, angle: .degrees(120)),
                            lineWidth: 4
                        )
                        .blur(radius: 2)
                )
                .shadow(color: Color.purple.opacity(0.10), radius: 10, x: 0, y: 4)
                .shadow(color: Color.blue.opacity(0.08), radius: 8, x: 0, y: -2)
                .overlay(
                    // Bubble highlight (top left)
                    Circle()
                        .fill(Color.white.opacity(0.32))
                        .frame(width: 40, height: 22)
                        .offset(x: -30, y: -38)
                        .blur(radius: 0.5)
                )
                .glassEffect()

        }
        .frame(width: 170, height: 150)
        .clipShape(Circle())
    }
}

// MARK: - Generated Placeholder

private struct GeneratedPlaceholder: View {
    let image: Image
    var size: CGFloat = 150
    var body: some View {
        image
            .resizable()
            .scaledToFill()
            .frame(width: size, height: size)
            .clipShape(RoundedRectangle(cornerRadius: 20, style: .continuous))
            .overlay(
                RoundedRectangle(cornerRadius: 20, style: .continuous)
                    .stroke(
                        AngularGradient(gradient: Gradient(colors: [
                            Color.blue.opacity(0.32),
                            Color.purple.opacity(0.32),
                            Color.red.opacity(0.30),
                            Color.orange.opacity(0.29),
                            Color.yellow.opacity(0.28),
                            Color.green.opacity(0.29),
                            Color.cyan.opacity(0.30),
                            Color.blue.opacity(0.32)
                        ]), center: .center, angle: .degrees(120)),
                        lineWidth: 4
                    )
                    .blur(radius: 2)
                    .frame(width: size, height: size)
            )
            .shadow(color: Color.purple.opacity(0.18), radius: 12)
    }
}

// MARK: - Preview

#Preview {
    struct PreviewContainer: View {
        @State private var selected: StateType = .idle
        enum StateType: String, CaseIterable, Identifiable {
            case idle, generating, generated
            var id: String { rawValue }
        }
        @State private var state: AIImageGenerationState = .idle(prompt: "Describe an image or add a suggestion from the list.")
        var body: some View {
            VStack(spacing: 30) {
                Picker("State", selection: $selected) {
                    ForEach(StateType.allCases) { type in
                        Text(type.rawValue.capitalized).tag(type)
                    }
                }
                .pickerStyle(.segmented)
                .padding(.horizontal)
                AIImageGeneration(state: state)
                    .frame(height: 200)
            }
            .onChange(of: selected) { oldValue, newValue in
                withAnimation(.easeInOut(duration: 0.45)) {
                    switch newValue {
                    case .idle:
                        state = .idle(prompt: "Describe an image or add a suggestion from the list.")
                    case .generating:
                        state = .generating
                    case .generated:
                        state = .generated(image: Image(systemName: "photo"))
                    }
                }
            }
            .padding()
        }
    }
    return PreviewContainer()
} 
